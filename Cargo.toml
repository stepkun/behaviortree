# Copyright Â© 2025 Stephan Kunz
[package]
resolver = "3"
name = "behaviortree"
version = "0.7.0"
edition = "2024"
license-file = "LICENSE"
authors = ["stepkun <stephan.kunz@kabelbw.de>"]
description = "A #![no_std] compatible behavior tree library similar to 'BehaviorTree.CPP'."
rust-version = "1.88.0"
repository = "https://github.com/stepkun/behaviortree.git"
homepage = "http://github.com/stepkun/behaviortree.git"
documentation = "https://docs.rs/behaviortree/"
readme = "README.md"
keywords = ["automation", "behavior", "embedded", "robots", "robotics"]
categories = ["development-tools", "science::robotics", "simulation"]
exclude = ["laze*", "benches/**", "embedded/**", "examples/**", "tests/**"]

[lib]
name = "behaviortree"

[lints.rust]
missing_docs = "warn"
unexpected_cfgs = { level = "warn", check-cfg = [
    'cfg(context, values(any()))',
] }
unsafe_code = "warn"
unused_must_use = "warn"

[lints.rustdoc]
private_intra_doc_links = "allow"

[lints.clippy]
enum_glob_use = "deny"
expect_used = "deny"
nursery = { level = "deny", priority = -1 }
panic = "deny"
pedantic = { level = "deny", priority = -1 }
unwrap_used = "deny"

[[bench]]
name = "factory"
harness = false

[[bench]]
name = "fallback"
harness = false

[[bench]]
name = "parallel"
harness = false

[[bench]]
name = "sequence"
harness = false

[[bench]]
name = "tree"
harness = false

[dependencies]
#ariel-os = { path = "./build/imports/ariel-os/src/ariel-os", features = [
#    "time",
#] }
#ariel-os-boards = { path = "./build/imports/ariel-os/src/ariel-os-boards" }
behaviortree-derive = { path = "derive", version = "0.3" }
async-trait = { version = "0.1.88", default-features = false }
bytes = { version = "1", default-features = false }
#databoard = { path = "../databoard", version = "0.2", default-features = false }
databoard = { version = "0.2", default-features = false }
#futures = { version = "0.3.31", default-features = false, features = ["alloc"] }
libloading = { version = "0.8.9", default-features = false, optional = true }
nanoserde = { version = "0.2.1", default-features = false, features = ["json"] }
rand = { version = "0.9.2", optional = true }
roxmltree = { version = "0.20.0", default-features = false, features = [
    "positions",
] }
spin = { version = "0.10.0", default-features = false, features = [
    "rwlock",
    "use_ticket_mutex",
] }
thingbuf = { version = "0.1", default-features = false, features = ["alloc"] }
#tinyscript = { path = "../tinyscript", version = "0.4", default-features = false }
tinyscript = { version = "0.4", default-features = false }
tokio = { version = "1.47.1", features = [
    "rt-multi-thread",
    "macros",
    "time",
], optional = true }
tracing = { version = "0.1.41", default-features = false, features = [
    "attributes",
] }
uuid = { version = "1.18.0", default-features = false, features = [
    "v4",
], optional = true }
#woxml = { path = "../woxml", version = "0.4.1", default-features = false }
woxml = { version = "0.4.1", default-features = false }
zeromq = { version = "0.4.1", default-features = false, features = [
    "tcp-transport",
], optional = true }

[build-dependencies]

[dev-dependencies]
criterion = "0.7.0"
doc-comment = "0.3.3"
rstest = "0.26.1"
trybuild = { version = "1.0.110", features = ["diff"] }

[features]
default = ["std", "change_state_after", "all_behaviors"]
all_behaviors = [
    "always_failure",
    "always_running",
    "always_success",
    "async_fallback",
    "async_sequence",
    "delay",
    "fallback",
    "force_failure",
    "force_running",
    "force_success",
    "if_then_else",
    "inverter",
    "keep_running_until_failure",
    "loop_bool",
    "loop_double",
    "loop_int",
    "loop_string",
    "parallel",
    "parallel_all",
    "pop_bool",
    "pop_double",
    "pop_int",
    "pop_string",
    "precondition",
    "reactive_fallback",
    "reactive_sequence",
    "repeat",
    "retry_until_successful",
    "run_once",
    "script",
    "script_condition",
    "sequence",
    "sequence_with_memory",
    "set_blackboard",
    "simple_behavior",
    "skip_unless_updated",
    "sleep",
    "switch2",
    "switch3",
    "switch4",
    "switch5",
    "switch6",
    "test_behavior",
    "timeout",
    "unset_blackboard",
    "wait_value_updated",
    "was_entry_updated",
    "while_do_else",

] # shortcuts for certain purposesdefault = ["std", "all_behaviors"]
std = [
    "databoard/std",
    "libloading",
    "roxmltree/std",
    "rand",
    "tinyscript/std",
    "tokio",
    "uuid",
    "woxml/std",
    "zeromq",
    "zeromq/tokio-runtime",
]
# modules that contain multiple implementations
change_state_after = []
entry_updated = []
fallbacks = []
force_state = []
loop_queue = []
pop_from_queue = []
sequences = []
switch = []
test_behavior = []
# special features
mocking = ["test_behavior"]
# the behaviors
always_failure = ["test_behavior"]
always_running = ["test_behavior"]
always_success = ["test_behavior"]
async_fallback = ["fallbacks"]
async_sequence = ["sequences"]
delay = []
fallback = ["fallbacks"]
force_failure = ["force_state"]
force_running = ["force_state"]
force_success = ["force_state"]
if_then_else = []
inverter = []
keep_running_until_failure = []
loop_bool = ["loop_queue"]
loop_double = ["loop_queue"]
loop_int = ["loop_queue"]
loop_string = ["loop_queue"]
parallel = []
parallel_all = []
pop_bool = ["pop_from_queue"]
pop_double = ["pop_from_queue"]
pop_int = ["pop_from_queue"]
pop_string = ["pop_from_queue"]
precondition = []
reactive_fallback = []
reactive_sequence = []
repeat = []
retry_until_successful = []
run_once = []
script = []
script_condition = []
set_blackboard = []
simple_behavior = []
skip_unless_updated = ["entry_updated"]
sleep = []
sequence = ["sequences"]
sequence_with_memory = []
switch2 = ["switch"]
switch3 = ["switch"]
switch4 = ["switch"]
switch5 = ["switch"]
switch6 = ["switch"]
timeout = []
unset_blackboard = []
wait_value_updated = ["entry_updated"]
was_entry_updated = ["entry_updated"]
while_do_else = []

[profile.release]
opt-level = 's'        # Optimize for size.
lto = true             # Enable Link Time Optimisation
codegen-units = 1      # Reduced to increase optimisations
overflow-checks = true # useful

[profile.production]
inherits = "release"
panic = 'abort'      # Abort on panic
strip = "symbols"    # Strip symbols from binary

[profile.samply]
inherits = "release"
debug = true         # Create debug symbols for profiling
